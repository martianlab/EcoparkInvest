import os, itertools, time, random, math
import pandas as pd, numpy as np
from datetime import timedelta
from tinkoff.invest import Client, CandleInterval, InstrumentStatus
from tinkoff.invest.utils import now
from tinkoff.invest.exceptions import RequestError
from grpc import StatusCode

# ‚îÄ‚îÄ‚îÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN          = os.getenv("TINKOFF_TOKEN")

TICKERS        = ["IRAO"]              # —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
INTERVAL       = CandleInterval.CANDLE_INTERVAL_30_MIN
DAYS_BACK      = 365

CAPITAL_START  = 50_000             # ‚ÇΩ
COMMISSION     = 0.0004                # 0.04‚ÄØ%
RISK_PCT       = 0.02

GRID_LEVEL     = [20, 30, 40, 60]
GRID_TP         = [0.012, 0.015, 0.018]
GRID_SL         = [0.004, 0.005]
GRID_DELTA     = [0.003, 0.004]

EQUITY_FREQ    = "1D"                  # —á–∞—Å—Ç–æ—Ç–∞ –∑–∞–ø–∏—Å–∏ equity‚Äë–∫—Ä–∏–≤–æ–π

# ‚îÄ‚îÄ‚îÄ FIGI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def resolve_figi(ticker, token):
    with Client(token) as c:
        for s in c.instruments.shares(
                instrument_status=InstrumentStatus.INSTRUMENT_STATUS_BASE
            ).instruments:
            if s.ticker.upper() == ticker.upper() and s.api_trade_available_flag:
                return s.figi
    return None

# ‚îÄ‚îÄ‚îÄ –£—Å—Ç–æ–π—á–∏–≤—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å–≤–µ—á–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def safe_get_all_candles(client, **kwargs):
    backoff, attempts_left = 1, 5
    while True:
        try:
            yield from client.get_all_candles(**kwargs)
            break
        except RequestError as e:
            status, details, meta = e.args
            if status == StatusCode.RESOURCE_EXHAUSTED:
                wait = max(int(meta.ratelimit_reset), 1)
                print(f"  ‚è≥ RPS‚Äë–ª–∏–º–∏—Ç, –∂–¥—É {wait}s ‚Ä¶")
                time.sleep(wait + 1)
            elif status == StatusCode.UNAVAILABLE and attempts_left:
                print(f"  üîÑ –¢–∞–π–º‚Äë–∞—É—Ç, retry in {backoff}s ‚Ä¶ ({attempts_left} left)")
                time.sleep(backoff + random.uniform(0, .5))
                backoff *= 2; attempts_left -= 1
            else:
                raise

def fetch_candles(token, figi):
    since = now() - timedelta(days=DAYS_BACK)
    rows  = []
    with Client(token) as cl:
        try:
            for c in safe_get_all_candles(cl, figi=figi, from_=since, interval=INTERVAL):
                rows.append({
                    "time":  pd.to_datetime(c.time),
                    "open":  c.open.units  + c.open.nano  / 1e9,
                    "high":  c.high.units  + c.high.nano  / 1e9,
                    "low":   c.low.units   + c.low.nano   / 1e9,
                    "close": c.close.units + c.close.nano / 1e9,
                    "vol":   c.volume})
        except RequestError as e:
            print("  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏:", e.args[1]); return None
    df = pd.DataFrame(rows).set_index("time").sort_index()
    if df.empty: return None
    if df.index.tz is None: df = df.tz_localize("UTC")
    return df.tz_convert("Europe/Moscow")

# ‚îÄ‚îÄ‚îÄ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def add_levels(df, p):
    df["hi_lvl"] = df["high"].rolling(p).max().shift(1)
    return df

# ‚îÄ‚îÄ‚îÄ Back‚Äëtest —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–æ–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def backtest(df_raw, *, level_period, tp, sl, min_delta, hrs=(10, 17)):
    df            = add_levels(df_raw.copy(), level_period)
    cap           = CAPITAL_START
    pos_qty       = 0
    entry_price   = None
    entry_value   = 0

    trades, equity = [], []

    for t, r in df.iterrows():
        # ‚îÄ‚îÄ –≤—ã—Ö–æ–¥
        if pos_qty:
            change = (r.close / entry_price) - 1
            if change >= tp or change <= -sl:
                exit_val = pos_qty * r.close
                pnl      = exit_val - entry_value
                cap     += pnl
                cap     -= exit_val * COMMISSION
                trades.append({
                    "time": t, "side": "SELL",
                    "qty":  pos_qty, "price": r.close,
                    "value": exit_val, "pnl": pnl,
                    "capital_after": cap
                })
                pos_qty = 0; entry_price = None; entry_value = 0

        # ‚îÄ‚îÄ –≤—Ö–æ–¥
        if pos_qty == 0 and hrs[0] <= t.hour < hrs[1]:
            if r.close > r.hi_lvl and (r.close - r.hi_lvl) / r.hi_lvl >= min_delta:
                risk_money = cap * RISK_PCT
                qty_float  = risk_money / (r.close * sl)
                qty        = math.floor(min(qty_float, cap / r.close))
                if qty > 0:
                    entry_price = r.close
                    pos_qty     = qty
                    entry_value = qty * entry_price
                    cap        -= entry_value * COMMISSION
                    trades.append({
                        "time": t, "side": "BUY",
                        "qty":  qty, "price": entry_price,
                        "value": entry_value, "pnl": 0,
                        "capital_after": cap
                    })

        # ‚îÄ‚îÄ equity‚Äë—Å—Ä–µ–∑
        if not equity or t.floor(EQUITY_FREQ) > equity[-1]["time"]:
            m2m = cap if pos_qty == 0 else cap + pos_qty * (r.close - entry_price)
            equity.append({"time": t.floor(EQUITY_FREQ), "equity": m2m})

    # ‚îÄ‚îÄ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞
    if pos_qty:
        m2m = cap + pos_qty * (df.iloc[-1].close - entry_price)
    else:
        m2m = cap
    equity.append({"time": df.index[-1].floor(EQUITY_FREQ), "equity": m2m})

    ret  = (m2m / CAPITAL_START - 1) * 100
    pnl_arr = np.array([tr["pnl"] for tr in trades if tr["side"] == "SELL"])
    win = (pnl_arr > 0).mean() * 100 if pnl_arr.size else 0
    avg = np.mean(pnl_arr / CAPITAL_START * 100) if pnl_arr.size else 0

    return {
        "return_%":    ret,
        "trades":      len(pnl_arr),
        "win_%":       win,
        "avg_trade_%": avg,
        "trades_df":   pd.DataFrame(trades),
        "equity_df":   pd.DataFrame(equity).drop_duplicates("time")
    }

# ‚îÄ‚îÄ‚îÄ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≥–æ–Ω ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    summary = []

    for tic in TICKERS:
        print(f"\n=== {tic} ===")
        figi = resolve_figi(tic, TOKEN)
        if not figi: print("  ‚ö†Ô∏è  FIGI –Ω–µ –Ω–∞–π–¥–µ–Ω"); continue

        candles = fetch_candles(TOKEN, figi)
        if candles is None: print("  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫"); continue

        # ‚îÄ‚îÄ –ø–æ–¥–±–æ—Ä –ª—É—á—à–µ–π —Å–µ—Ç–∫–∏
        best_metrics, best_params = None, None
        for lp, tp, sl, md in itertools.product(
                GRID_LEVEL, GRID_TP, GRID_SL, GRID_DELTA):
            res = backtest(candles, level_period=lp, tp=tp, sl=sl, min_delta=md)
            if best_metrics is None or res["return_%"] > best_metrics["return_%"]:
                best_metrics, best_params = res, (lp, tp, sl, md)

        lp, tp, sl, md = best_params
        print(f"  PnL {best_metrics['return_%']:.2f}% | trades={best_metrics['trades']} | "
              f"lvl={lp} tp={tp} sl={sl} Œî={md}")

        # ‚îÄ‚îÄ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
        detailed = backtest(candles, level_period=lp, tp=tp, sl=sl, min_delta=md)

        detailed["trades_df"].to_csv(f"trades_{tic}.csv", index=False)
        detailed["equity_df"].to_csv(f"equity_{tic}.csv", index=False)

        print(f"    üìÑ –õ–æ–≥ —Å–¥–µ–ª–æ–∫  ‚Üí trades_{tic}.csv")
        print(f"    üìà Equity‚Äë–∫—Ä–∏–≤–∞—è ‚Üí equity_{tic}.csv")

        # ‚îÄ‚îÄ –¥–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Å—Ç–æ–ª–±—Ü—ã –≤ summary
        summary.append({
            "ticker": tic,
            "lvl":    lp,
            "tp":     tp,
            "sl":     sl,
            "delta":  md,
            **best_metrics
        })

    # ‚îÄ‚îÄ —ç–∫—Ä–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞
    df = pd.DataFrame(summary).sort_values("return_%", ascending=False)
    print("\n==== –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ ====")
    if not df.empty:
        print(df[["ticker", "return_%", "trades", "win_%",
                  "lvl", "tp", "sl", "delta"]]
              .to_string(index=False,
                         formatters={"return_%": "{:6.2f}".format,
                                     "win_%":    "{:5.1f}".format}))
    else:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äì –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã.")